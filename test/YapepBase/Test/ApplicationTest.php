<?php

namespace YapepBase\Test;

use YapepBase\DependencyInjection\SystemContainer;

/**
 * Test class for Application.
 * Generated by PHPUnit on 2011-12-14 at 16:13:14.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var \YapepBase\Test\Mock\ApplicationMock
	 */
	protected $object;
	protected $oldApp;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->oldApp = \YapepBase\Application::getInstance();
		$this->object = new Mock\ApplicationMock;
		\YapepBase\Application::setInstance($this->object);
	}

	protected function tearDown() {
		\YapepBase\Application::setInstance($this->oldApp);
	}

	public function testSetRouter() {
		$router = new \YapepBase\Test\Mock\Router\RouterMock();
		$this->object->setRouter($router);
		$this->assertEquals($router, $this->object->getRouter());
	}

	public function testSetDiContainer() {
		$container = new \YapepBase\DependencyInjection\SystemContainer();
		$this->object->setDiContainer($container);
		$this->assertEquals($container, $this->object->getDiContainer());
	}

	public function testSetRequest() {
		$request = new Mock\Request\RequestMock('');
		$this->object->setRequest($request);
		$this->assertEquals($request, $this->object->getRequest());
	}

	public function testSetResponse() {
		$response = new Mock\Response\ResponseMock();
		$this->object->setResponse($response);
		$this->assertEquals($response, $this->object->getResponse());
	}

	public function testGetErrorHandlerRegistry() {
		$this->assertInstanceOf('\YapepBase\ErrorHandler\ErrorHandlerRegistry',
			$this->object->getErrorHandlerRegistry());
	}

	public function testGetI18nTranslator() {
		try {
			$this->object->getI18nTranslator();
			$this->fail('No exception is thrown if getting a translator without setting it first');
		} catch (\YapepBase\Exception\Exception $exception) {
		}

		$translator = new \YapepBase\Test\Mock\I18n\TranslatorMock();
		$this->object->setI18nTranslator($translator);
		$this->assertSame($translator, $this->object->getI18nTranslator(), 'Invalid translator is returned');
		$this->object->clearI18nTranslator();
		try {
			$this->object->getI18nTranslator();
			$this->fail('No exception is thrown if getting a translator after clearing it');
		} catch (\YapepBase\Exception\Exception $exception) {
		}
	}

	public function testRun() {
		$out = new Mock\Response\OutputMock();
		$request = new Mock\Request\RequestMock('/');
		$response = new Mock\Response\ResponseMock($out);
		$router = new Mock\Router\ApplicationRouterMock();
		$this->object->getDiContainer()->setSearchNamespaces(SystemContainer::NAMESPACE_SEARCH_CONTROLLER,
			array('\YapepBase\Test\Mock\Controller'));
		$this->object->setRequest($request);
		$this->object->setResponse($response);
		$this->object->setRouter($router);
		$this->object->run();
		$response->send();
	}
}
