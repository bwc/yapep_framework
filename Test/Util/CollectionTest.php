<?php

namespace YapepBase\Test\Util;

/**
 * Test class for Collection.
 * Generated by PHPUnit on 2012-01-31 at 12:10:44.
 */
class CollectionTest extends \PHPUnit_Framework_TestCase {
    public function testOffset() {
        $collection = new \YapepBase\Test\Mock\Util\CollectionMock();
        $this->assertEquals(0, $collection->count());
        try {
            $collection->offsetGet(0);
            $this->fail('offsetGet on a non existent element in a Collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }
        $o = new \YapepBase\Test\Mock\Util\CollectionElementMock();
        $collection->offsetSet(0, $o);
        $this->assertEquals(1, $collection->count());
        $this->assertEquals($o, $collection->offsetGet(0));
        $this->assertEquals(true, $collection->offsetExists(0));
        $collection->offsetUnset(0);
        $this->assertEquals(0, $collection->count());
        try {
            $collection->offsetGet(0);
            $this->fail('offsetGet on a non existent element in a Collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }

        $collection->offsetSet(null, $o);
        $this->assertEquals(1, $collection->count());
        $this->assertEquals($o, $collection->offsetGet(1));
        $this->assertEquals(true, $collection->offsetExists(1));
        $collection->offsetUnset(1);
        $this->assertEquals(0, $collection->count());
        try {
            $collection->offsetGet(0);
            $this->fail('offsetGet on a non existent element in a Collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }

        try {
            $collection->offsetUnset(0);
            $this->fail('offsetUnset on a non existent element in a Collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }
    }

    public function testKeyCheck() {
        $this->setExpectedException('\YapepBase\Exception\ValueException');
        $collection = new \YapepBase\Test\Mock\Util\CollectionMock();
        $o = new \YapepBase\Test\Mock\Util\CollectionElementMock();
        $collection->offsetSet('test', $o);
        $this->fail('Collection::keyCheck should throw a ValueException, if a string offset is passed');
    }

    public function testIterator() {
        $collection = new \YapepBase\Test\Mock\Util\CollectionMock();
        $this->assertEquals(false, $collection->rewind());
        $o1 = new \YapepBase\Test\Mock\Util\CollectionElementMock();
        $o2 = new \YapepBase\Test\Mock\Util\CollectionElementMock();
        $o3 = new \YapepBase\Test\Mock\Util\CollectionElementMock();
        $collection[] = $o1;
        $collection[] = $o2;
        $collection[] = $o3;
        $this->assertEquals($o1, $collection->current());
        $this->assertEquals(0, $collection->key());
        $this->assertEquals(true, $collection->valid());
        $this->assertEquals($o1, $collection->next());

        $this->assertEquals($o2, $collection->current());
        $this->assertEquals(1, $collection->key());
        $this->assertEquals(true, $collection->valid());
        $this->assertEquals($o2, $collection->next());

        $this->assertEquals($o3, $collection->current());
        $this->assertEquals(2, $collection->key());
        $this->assertEquals(true, $collection->valid());
        $this->assertEquals($o3, $collection->next());

        $this->assertEquals(false, $collection->valid());
        try {
            $collection->current();
            $this->fail('Calling Collection::current() at the end of the collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }
        try {
            $collection->next();
            $this->fail('Calling Collection::next() at the end of the collection should result in an IndexOutOfBoundsException');
        } catch (\YapepBase\Exception\IndexOutOfBoundsException $e) { }

        $this->assertEquals(true, $collection->rewind());
        $this->assertEquals($o1, $collection->current());
        $this->assertEquals(0, $collection->key());
        $this->assertEquals(true, $collection->valid());
    }
}
