<?php

namespace YapepBase\Syslog;

/**
 * Test class for SyslogConnection.
 * Generated by PHPUnit on 2011-12-06 at 11:33:00.
 */
class SyslogConnectionTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var SyslogConnection
     */
    protected $object;

    protected function setUp() {
        $this->object = new SyslogConnection;
    }

    public function testPath() {
        $this->object->setPath('/test');
        $this->assertEquals('/test', $this->object->getPath());
    }
    
    public function testIdent() {
        $this->object->setIdent('identtest');
        $this->assertEquals('identtest', $this->object->getIdent());
    }
    
    public function testOptions() {
        $this->object->setOptions(SyslogConnection::LOG_PID);
        $this->assertEquals(SyslogConnection::LOG_PID, $this->object->getOptions());
    }
    
    public function testFacility() {
        $this->object->setFacility(SyslogConnection::LOG_AUTH);
        $this->assertEquals(SyslogConnection::LOG_AUTH, $this->object->getFacility());
        
        try {
            $this->object->setFacility(192);
            $this->fail('Setting an invalid facility should result in a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
        
        try {
            $this->object->setFacility(-1);
            $this->fail('Setting an invalid facility should result in a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }

        try {
            $this->object->setFacility(7);
            $this->fail('Setting an invalid facility should result in a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
    }

    public function testLogging() {
        $logpath = \dirname(__DIR__) . '/Temp/Syslog/log';
        if (\file_exists($logpath)) {
            \unlink($logpath);
        }
        $this->object->setFacility(SyslogConnection::LOG_USER);
        $this->object->setPath($logpath);
        $this->object->setIdent('test');
        $sock = \socket_create(AF_UNIX, SOCK_STREAM, 0);
        \socket_set_option($sock, SOL_SOCKET, SO_REUSEADDR, 1);
        \socket_bind($sock, $logpath);
        \socket_listen($sock);
        if (!\function_exists('pcntl_fork')) {
            $this->markTestSkipped('Skipping syslog test, pcntl_fork is not available');
        }
        $pid = \pcntl_fork();
        if ($pid < 0) {
            $this->markTestSkipped('Failed to fork, skipping test.');
            return;
        } elseif ($pid == 0) {
            $this->object->log(SyslogConnection::LOG_NOTICE, 'test', 'test', 1323182719);
            exit;
        } else {
            $client = \socket_accept($sock);
            if ($client !== false) {
                $data = \socket_read($client, 1024);
                $this->assertEquals('<13>Dec  6 15:45:19 test: test', $data);
                \socket_close($client);
            } else {
                $this->fail('No client connected!');
            }
            \socket_close($sock);
            \pcntl_waitpid($pid, $status);
            if (\file_exists($logpath)) {
                \unlink($logpath);
            }
        }
    }
}
