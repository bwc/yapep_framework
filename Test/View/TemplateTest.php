<?php

namespace YapepBase\Test\View;
use \YapepBase\View\Template;
use \YapepBase\Test\Mock\View\TemplateMock;

/**
 * Test class for Template.
 * Generated by PHPUnit on 2011-12-05 at 15:52:01.
 */
class TemplateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \YapepBase\Test\Mock\View\TemplateMock
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TemplateMock;
    }

    /**
     * @covers \YapepBase\View\Template::hasVariable
     */
    public function testHasVariable() {
        $this->assertEquals(true, $this->object->hasVariable('var1'));
        $this->assertEquals(true, $this->object->hasVariable('var2'));
        $this->assertEquals(false, $this->object->hasVariable('var3'));
    }

    /**
     * @covers \YapepBase\View\Template::isRequiredVariable
     */
    public function testIsRequiredVariable() {
        $this->assertEquals(true, $this->object->isRequiredVariable('var1'));
        $this->assertEquals(false, $this->object->isRequiredVariable('var2'));
        try {
            $this->object->isRequiredVariable('var3');
            $this->fail('Calling isRequiredVariable on a non-defined variable should raise a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
    }

    /**
     * This function tests variable setting functionality
     */
    public function testVariables() {
        $this->object->set('var1', 'test1');
        $this->assertEquals('test1', $this->object->get('var1'));
        $this->assertEquals('test1', $this->object->get('var1', true));
        $this->object->set('var2', 'test2');
        $this->assertEquals('test2', $this->object->get('var2'));
        $this->assertEquals('test2', $this->object->get('var2', true));
        try {
            $this->object->set('var3', 'test3');
            $this->fail('Calling set on a non-defined variable should raise a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
        try {
            $this->object->get('var3');
            $this->fail('Calling get on a non-defined variable should raise a ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
    }

    /**
     * @covers \YapepBase\View\Template::render
     */
    public function testRender() {
        $o = new TemplateMock();
        try {
            $o->render('text/html', true);
            $this->fail('Calling render on a Template with missing required variables should raise ParameterException');
        } catch (\YapepBase\Exception\ParameterException $e) { }
        
        $o->set('var1', '&');
        $o->render('text/html', true);
        $this->assertEquals('&amp;', $o->get('var1'));
        $this->assertEquals('&', $o->get('var1', true));
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetLayout().
     */
    public function testSetLayout() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}
